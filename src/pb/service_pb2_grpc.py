# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import aggregate_pb2 as aggregate__pb2
from . import common_pb2 as common__pb2
from . import datum_pb2 as datum__pb2
from . import heart_beat_pb2 as heart__beat__pb2
from . import hqs_pb2 as hqs__pb2
from . import service_pb2 as service__pb2
from . import subject_pb2 as subject__pb2


class DataOperationsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDatum = channel.unary_unary(
                '/kaist.iclab.abclogger.DataOperations/CreateDatum',
                request_serializer=datum__pb2.Datum.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.CreateData = channel.unary_unary(
                '/kaist.iclab.abclogger.DataOperations/CreateData',
                request_serializer=service__pb2.Bulk.Data.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.CreateDataAsStream = channel.stream_unary(
                '/kaist.iclab.abclogger.DataOperations/CreateDataAsStream',
                request_serializer=datum__pb2.Datum.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.ReadData = channel.unary_unary(
                '/kaist.iclab.abclogger.DataOperations/ReadData',
                request_serializer=service__pb2.Query.Read.SerializeToString,
                response_deserializer=service__pb2.Bulk.Data.FromString,
                )
        self.ReadDataAsStream = channel.unary_stream(
                '/kaist.iclab.abclogger.DataOperations/ReadDataAsStream',
                request_serializer=service__pb2.Query.Read.SerializeToString,
                response_deserializer=datum__pb2.Datum.FromString,
                )


class DataOperationsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateDatum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDataAsStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadDataAsStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataOperationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDatum': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDatum,
                    request_deserializer=datum__pb2.Datum.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'CreateData': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateData,
                    request_deserializer=service__pb2.Bulk.Data.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'CreateDataAsStream': grpc.stream_unary_rpc_method_handler(
                    servicer.CreateDataAsStream,
                    request_deserializer=datum__pb2.Datum.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'ReadData': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadData,
                    request_deserializer=service__pb2.Query.Read.FromString,
                    response_serializer=service__pb2.Bulk.Data.SerializeToString,
            ),
            'ReadDataAsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadDataAsStream,
                    request_deserializer=service__pb2.Query.Read.FromString,
                    response_serializer=datum__pb2.Datum.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kaist.iclab.abclogger.DataOperations', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataOperations(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateDatum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.DataOperations/CreateDatum',
            datum__pb2.Datum.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.DataOperations/CreateData',
            service__pb2.Bulk.Data.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDataAsStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/kaist.iclab.abclogger.DataOperations/CreateDataAsStream',
            datum__pb2.Datum.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.DataOperations/ReadData',
            service__pb2.Query.Read.SerializeToString,
            service__pb2.Bulk.Data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadDataAsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/kaist.iclab.abclogger.DataOperations/ReadDataAsStream',
            service__pb2.Query.Read.SerializeToString,
            datum__pb2.Datum.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HeartBeatsOperationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateHeartBeat = channel.unary_unary(
                '/kaist.iclab.abclogger.HeartBeatsOperation/CreateHeartBeat',
                request_serializer=heart__beat__pb2.HeartBeat.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.ReadHeartBeats = channel.unary_unary(
                '/kaist.iclab.abclogger.HeartBeatsOperation/ReadHeartBeats',
                request_serializer=service__pb2.Query.Read.SerializeToString,
                response_deserializer=service__pb2.Bulk.HeartBeats.FromString,
                )
        self.ReadHeartBeatsAsStream = channel.unary_stream(
                '/kaist.iclab.abclogger.HeartBeatsOperation/ReadHeartBeatsAsStream',
                request_serializer=service__pb2.Query.Read.SerializeToString,
                response_deserializer=heart__beat__pb2.HeartBeat.FromString,
                )


class HeartBeatsOperationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateHeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadHeartBeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadHeartBeatsAsStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HeartBeatsOperationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateHeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateHeartBeat,
                    request_deserializer=heart__beat__pb2.HeartBeat.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'ReadHeartBeats': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadHeartBeats,
                    request_deserializer=service__pb2.Query.Read.FromString,
                    response_serializer=service__pb2.Bulk.HeartBeats.SerializeToString,
            ),
            'ReadHeartBeatsAsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadHeartBeatsAsStream,
                    request_deserializer=service__pb2.Query.Read.FromString,
                    response_serializer=heart__beat__pb2.HeartBeat.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kaist.iclab.abclogger.HeartBeatsOperation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HeartBeatsOperation(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateHeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.HeartBeatsOperation/CreateHeartBeat',
            heart__beat__pb2.HeartBeat.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadHeartBeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.HeartBeatsOperation/ReadHeartBeats',
            service__pb2.Query.Read.SerializeToString,
            service__pb2.Bulk.HeartBeats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadHeartBeatsAsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/kaist.iclab.abclogger.HeartBeatsOperation/ReadHeartBeatsAsStream',
            service__pb2.Query.Read.SerializeToString,
            heart__beat__pb2.HeartBeat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SubjectsOperationsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadSubjects = channel.unary_unary(
                '/kaist.iclab.abclogger.SubjectsOperations/ReadSubjects',
                request_serializer=service__pb2.Query.Read.SerializeToString,
                response_deserializer=service__pb2.Bulk.Subjects.FromString,
                )
        self.ReadSubjectsAsStream = channel.unary_stream(
                '/kaist.iclab.abclogger.SubjectsOperations/ReadSubjectsAsStream',
                request_serializer=service__pb2.Query.Read.SerializeToString,
                response_deserializer=subject__pb2.Subject.FromString,
                )


class SubjectsOperationsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadSubjects(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadSubjectsAsStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubjectsOperationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadSubjects': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadSubjects,
                    request_deserializer=service__pb2.Query.Read.FromString,
                    response_serializer=service__pb2.Bulk.Subjects.SerializeToString,
            ),
            'ReadSubjectsAsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadSubjectsAsStream,
                    request_deserializer=service__pb2.Query.Read.FromString,
                    response_serializer=subject__pb2.Subject.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kaist.iclab.abclogger.SubjectsOperations', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SubjectsOperations(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadSubjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.SubjectsOperations/ReadSubjects',
            service__pb2.Query.Read.SerializeToString,
            service__pb2.Bulk.Subjects.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadSubjectsAsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/kaist.iclab.abclogger.SubjectsOperations/ReadSubjectsAsStream',
            service__pb2.Query.Read.SerializeToString,
            subject__pb2.Subject.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AggregateOperationsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CountSubjects = channel.unary_unary(
                '/kaist.iclab.abclogger.AggregateOperations/CountSubjects',
                request_serializer=service__pb2.Query.Aggregate.SerializeToString,
                response_deserializer=aggregate__pb2.Aggregation.FromString,
                )
        self.CountData = channel.unary_unary(
                '/kaist.iclab.abclogger.AggregateOperations/CountData',
                request_serializer=service__pb2.Query.Aggregate.SerializeToString,
                response_deserializer=aggregate__pb2.Aggregation.FromString,
                )


class AggregateOperationsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CountSubjects(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AggregateOperationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CountSubjects': grpc.unary_unary_rpc_method_handler(
                    servicer.CountSubjects,
                    request_deserializer=service__pb2.Query.Aggregate.FromString,
                    response_serializer=aggregate__pb2.Aggregation.SerializeToString,
            ),
            'CountData': grpc.unary_unary_rpc_method_handler(
                    servicer.CountData,
                    request_deserializer=service__pb2.Query.Aggregate.FromString,
                    response_serializer=aggregate__pb2.Aggregation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kaist.iclab.abclogger.AggregateOperations', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AggregateOperations(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CountSubjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.AggregateOperations/CountSubjects',
            service__pb2.Query.Aggregate.SerializeToString,
            aggregate__pb2.Aggregation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.AggregateOperations/CountData',
            service__pb2.Query.Aggregate.SerializeToString,
            aggregate__pb2.Aggregation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HqsOperationsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadPhysicalHqs = channel.unary_unary(
                '/kaist.iclab.abclogger.HqsOperations/ReadPhysicalHqs',
                request_serializer=service__pb2.Query.Compare.SerializeToString,
                response_deserializer=hqs__pb2.PhysicalHqs.FromString,
                )
        self.ReadSocialHqs = channel.unary_unary(
                '/kaist.iclab.abclogger.HqsOperations/ReadSocialHqs',
                request_serializer=service__pb2.Query.Compare.SerializeToString,
                response_deserializer=hqs__pb2.SocialHqs.FromString,
                )
        self.ReadDigitalHqs = channel.unary_unary(
                '/kaist.iclab.abclogger.HqsOperations/ReadDigitalHqs',
                request_serializer=service__pb2.Query.Compare.SerializeToString,
                response_deserializer=hqs__pb2.DigitalHqs.FromString,
                )


class HqsOperationsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadPhysicalHqs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadSocialHqs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadDigitalHqs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HqsOperationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadPhysicalHqs': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadPhysicalHqs,
                    request_deserializer=service__pb2.Query.Compare.FromString,
                    response_serializer=hqs__pb2.PhysicalHqs.SerializeToString,
            ),
            'ReadSocialHqs': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadSocialHqs,
                    request_deserializer=service__pb2.Query.Compare.FromString,
                    response_serializer=hqs__pb2.SocialHqs.SerializeToString,
            ),
            'ReadDigitalHqs': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadDigitalHqs,
                    request_deserializer=service__pb2.Query.Compare.FromString,
                    response_serializer=hqs__pb2.DigitalHqs.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kaist.iclab.abclogger.HqsOperations', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HqsOperations(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadPhysicalHqs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.HqsOperations/ReadPhysicalHqs',
            service__pb2.Query.Compare.SerializeToString,
            hqs__pb2.PhysicalHqs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadSocialHqs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.HqsOperations/ReadSocialHqs',
            service__pb2.Query.Compare.SerializeToString,
            hqs__pb2.SocialHqs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadDigitalHqs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kaist.iclab.abclogger.HqsOperations/ReadDigitalHqs',
            service__pb2.Query.Compare.SerializeToString,
            hqs__pb2.DigitalHqs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
